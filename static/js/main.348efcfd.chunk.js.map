{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","MovieRating","_ref5","rating","star","_ref4","rate","str","i","_starRating","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","res","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348efcfd.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsys from 'react-lines-ellipsis'\r\n//To install it run:\r\n// yarn add react-lines-ellipsis\r\n\r\nfunction Movie({title, poster, genres, rating, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster = {poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                    <MovieRating rating={rating} />\r\n                </div>\r\n                {/* <div className=\"Movie__Rating\">\r\n                    <MovieRating rating={rating} />\r\n                </div> */}\r\n                <div className=\"Movie__Synopsys\">\r\n                    <LinesEllipsys \r\n                        text= {synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre} &nbsp;</span>\r\n    )\r\n}\r\n\r\nfunction _starRating({rating}){\r\n    const starY = '★' //&#9733;&#x02605;\r\n    const starN = '☆' //&#9734;&#x02606;\r\n    const rate = rating/2\r\n    let str = \"\"\r\n\r\n    for(var i=1; i<=5; i++){\r\n        if(i <= rate) str += starY\r\n        else str += starN\r\n    }\r\n    return str\r\n}\r\n\r\nfunction MovieRating({rating}){\r\n    const star = _starRating({rating})\r\n    return (\r\n        <span className=\"Movie__Rating\">{rating}&nbsp; {star}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    rating: PropTypes.number.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes ={\r\n    genre: PropTypes.string.isRequired\r\n}\r\nMovieRating.propTypes ={\r\n    rating: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\n\r\nclass App extends Component {\r\n  //Mounting : componentWillMount() -> render() -> componentDidMount()\r\n  //Updateing : componentWillReceiveProps() -> shouldCompnentUpdate() -> componentWillUpdate() -> render() -> getSnapshotBeforeUpdate() ->componentDidUpdate()\r\n  \r\n  state = {}\r\n\r\n  componentDidMount(){\r\n    this._getMovies()\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      console.log(movie)\r\n      return <Movie \r\n        title = {movie.title_english} \r\n        poster = {movie.medium_cover_image} \r\n        key={movie.id} \r\n        genres={movie.genres}\r\n        rating={movie.rating}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    return movies;\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n    // return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\r\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n    // .then(res => {\r\n    //   if (res.status === 200 || res.status === 201) {\r\n    //     res.json().then(json => console.log(json));\r\n    //   } else {\r\n    //     console.error(res.statusText);\r\n    //   }\r\n    // })\r\n    .then(res => res.json())\r\n    .then(json => json.data.movies)\r\n    // .then(json => console.log(json))\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    const movie = this.state.movies;\r\n    return (\r\n      <div className={movie ? \"App\" : \"App--Loading\"}>\r\n        {movie ? this._renderMovies() : `Loading`}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}